{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"lapse-hs Hello, this is official Lapse documentation. Lapse is my LISP dialect that was created in educational purposes only. Why use it? Lapse is really small language but it has some modules for different use-cases. Installation guide Go to this page Click on latest successful action run from master (or run from specific commit) Find an \"Artifacts\" section and download version for your OS. (If you can't see download button, log in to your github account) Unzip this artifact and you will get an executable of Lapse interpreter To run some code, write this code in \".lp\" file (in fact, extension does not matter) and run <path-to-lapse-interpreter> <path-to-file> command in command line (You can find example files here ) Also, Lapse provides a clean REPL by <path-to-lapse-interpreter> command","title":"Lapse"},{"location":"#lapse-hs","text":"Hello, this is official Lapse documentation. Lapse is my LISP dialect that was created in educational purposes only.","title":"lapse-hs"},{"location":"#why-use-it","text":"Lapse is really small language but it has some modules for different use-cases.","title":"Why use it?"},{"location":"#installation-guide","text":"Go to this page Click on latest successful action run from master (or run from specific commit) Find an \"Artifacts\" section and download version for your OS. (If you can't see download button, log in to your github account) Unzip this artifact and you will get an executable of Lapse interpreter To run some code, write this code in \".lp\" file (in fact, extension does not matter) and run <path-to-lapse-interpreter> <path-to-file> command in command line (You can find example files here ) Also, Lapse provides a clean REPL by <path-to-lapse-interpreter> command","title":"Installation guide"},{"location":"modules/","text":"Modules Lapse includes different modules: ANSI terminal colors G-code generator Filesystem JSON Web server and client","title":"Index"},{"location":"modules/#modules","text":"Lapse includes different modules: ANSI terminal colors G-code generator Filesystem JSON Web server and client","title":"Modules"},{"location":"modules/colors/","text":"ANSI terminal colors Description Small module that allows you to type thing like (blue \"hello\") and produces string with that color (e.g. \"\\e[0;34mhello\\e[0m\" ). Import (import \"colors\") Usage (print $ blue \"Hello, user!\") Reference (black <string>) -- produces black string. (red <string>) -- produces red string. (green <string>) -- produces green string. (yellow <string>) -- produces yellow string. (blue <string>) -- produces blue string. (purple <string>) -- produces purple string. (cyan <string>) -- produces cyan string. (white <string>) -- produces white string. Source Source","title":"Colors"},{"location":"modules/colors/#ansi-terminal-colors","text":"","title":"ANSI terminal colors"},{"location":"modules/colors/#description","text":"Small module that allows you to type thing like (blue \"hello\") and produces string with that color (e.g. \"\\e[0;34mhello\\e[0m\" ).","title":"Description"},{"location":"modules/colors/#import","text":"(import \"colors\")","title":"Import"},{"location":"modules/colors/#usage","text":"(print $ blue \"Hello, user!\")","title":"Usage"},{"location":"modules/colors/#reference","text":"(black <string>) -- produces black string. (red <string>) -- produces red string. (green <string>) -- produces green string. (yellow <string>) -- produces yellow string. (blue <string>) -- produces blue string. (purple <string>) -- produces purple string. (cyan <string>) -- produces cyan string. (white <string>) -- produces white string.","title":"Reference"},{"location":"modules/colors/#source","text":"Source","title":"Source"},{"location":"modules/fs/","text":"Filesystem Description Module that allows you to interact with files. Import (import \"fs\") Usage (print $ readF \"text.txt\") Reference (readF <string:filename>) -- reads file as string and returns its text. (writeF <string:filename> <string:contents>) -- writes contents to file. (appendF <string:filename> <string:contents>) -- appends contents to file. (lsdir) -- returns list of strings -- files in CWD. (lsdir <string:path>) -- returns list of strings -- files in path . (chdir <string:path>) -- changes CWD to path . Source Source","title":"FS"},{"location":"modules/fs/#filesystem","text":"","title":"Filesystem"},{"location":"modules/fs/#description","text":"Module that allows you to interact with files.","title":"Description"},{"location":"modules/fs/#import","text":"(import \"fs\")","title":"Import"},{"location":"modules/fs/#usage","text":"(print $ readF \"text.txt\")","title":"Usage"},{"location":"modules/fs/#reference","text":"(readF <string:filename>) -- reads file as string and returns its text. (writeF <string:filename> <string:contents>) -- writes contents to file. (appendF <string:filename> <string:contents>) -- appends contents to file. (lsdir) -- returns list of strings -- files in CWD. (lsdir <string:path>) -- returns list of strings -- files in path . (chdir <string:path>) -- changes CWD to path .","title":"Reference"},{"location":"modules/fs/#source","text":"Source","title":"Source"},{"location":"modules/gcode/","text":"G-code generator Description Module that allows you to generate G-code from human-readable LISP code and prints it to stdout. Import (import \"gcode\") Usage (import \"gcode\") (init \"plra4\") (base) (go 5 50) (delta 5 -40) (down) (left 5) (right 20) (forward 50) (right 20) (backward 15) (base) (end) Reference (init <string:name>) -- init G-code for machine with name name (runs init_func of machine). (machine <string:name> <function:init_func> <function:end_func>) -- creates custom machine with name name , init init_func and end end_func . (end) -- end of G-code (runs end_func of machine). (base) -- go to base ( G0Z10 ; G0X0Y0 ; disable cutting). (down) -- enable cutting and run G1Z<material-z>F<speed> . (up) -- disable cutting and run G0Z10 . (go x y) -- go to x, y ( G0X<x>Y<y> or G1X<x>Y<y>F<speed> ). (delta x y) -- same as go, but relative to current position. left, right, forward, backward -- extra functions on top of delta. Source Source","title":"G-code"},{"location":"modules/gcode/#g-code-generator","text":"","title":"G-code generator"},{"location":"modules/gcode/#description","text":"Module that allows you to generate G-code from human-readable LISP code and prints it to stdout.","title":"Description"},{"location":"modules/gcode/#import","text":"(import \"gcode\")","title":"Import"},{"location":"modules/gcode/#usage","text":"(import \"gcode\") (init \"plra4\") (base) (go 5 50) (delta 5 -40) (down) (left 5) (right 20) (forward 50) (right 20) (backward 15) (base) (end)","title":"Usage"},{"location":"modules/gcode/#reference","text":"(init <string:name>) -- init G-code for machine with name name (runs init_func of machine). (machine <string:name> <function:init_func> <function:end_func>) -- creates custom machine with name name , init init_func and end end_func . (end) -- end of G-code (runs end_func of machine). (base) -- go to base ( G0Z10 ; G0X0Y0 ; disable cutting). (down) -- enable cutting and run G1Z<material-z>F<speed> . (up) -- disable cutting and run G0Z10 . (go x y) -- go to x, y ( G0X<x>Y<y> or G1X<x>Y<y>F<speed> ). (delta x y) -- same as go, but relative to current position. left, right, forward, backward -- extra functions on top of delta.","title":"Reference"},{"location":"modules/gcode/#source","text":"Source","title":"Source"},{"location":"modules/json/","text":"JSON Description Module that allows you to encode and decode JSON. Import (import \"json\") Usage (print $ decode $ encode 5) Reference (encode <value:data>) -- encodes data to JSON (Of course, it cannot store functions and macroses) and returns string. (decode <string:json-data>) -- decodes JSON and returns value (All numbers become floats!) Source Source","title":"JSON"},{"location":"modules/json/#json","text":"","title":"JSON"},{"location":"modules/json/#description","text":"Module that allows you to encode and decode JSON.","title":"Description"},{"location":"modules/json/#import","text":"(import \"json\")","title":"Import"},{"location":"modules/json/#usage","text":"(print $ decode $ encode 5)","title":"Usage"},{"location":"modules/json/#reference","text":"(encode <value:data>) -- encodes data to JSON (Of course, it cannot store functions and macroses) and returns string. (decode <string:json-data>) -- decodes JSON and returns value (All numbers become floats!)","title":"Reference"},{"location":"modules/json/#source","text":"Source","title":"Source"},{"location":"modules/web/","text":"Web (server and client) Description Module that allows you to make small web servers and clients. Import (import \"web\") Usage Server -- Built for web client from examples (import \"std\" \"web\" \"json\") (defn greet (fn ln) (concat \"Hello, \" fn \" \" ln \"!\")) - Create a handler (defn f (fn ln) (encode $ dict (first_name fn) (last_name ln) (greeting $ greet fn ln))) (defn fpost (txt fn ln) (concat txt \" \" fn \" \" ln)) (defn echo (body) body) - Build + serve (serve $ routeGET \"/greet\" (list \"fname\" \"lname\") f $ routePOST \"/post\" (list \"fname\" \"lname\") fpost $ routePOST \"/echo\" () echo $ server 2025) Client -- Uses web server from examples (import \"web\" \"std\" \"io\" \"json\") - Build request (set rget $ send $ withParam \"fname\" \"John\" $ withParam \"lname\" \"Black\" $ get \"http://localhost:2025/greet\") - Print response (print $ concat \"Got response: \" $ show rget) (print \"Body:\") (print $ resBody rget) - Decode JSON and get a greeting (set gr $ lookup greeting $ fst $ decode $ resBody rget) (print \"Greeting:\") (print gr) Reference Server (server <number:port>) -- creates a web server on port port . (routeGET <string:path> <list of strings:params> <function(params -> string):handler> <server>) -- adds GET route to server . (routePOST <string:path> <list of strings:params> <function(body, params -> string):handler> <server>) -- adds POST route to server . (serve <server>) -- serves a server. Client (get <string:url>) -- creates a GET request to url . (post <string:url>) -- creates a POST request to url . (withParam <string:name> <string or list of strings:value(s)>) -- adds param to request. (withBody <string:body>) -- adds body to request. (send <request>) -- sends request and returns response. (resStatus <response>) -- returns statusCode of response . (resBody <response>) -- returns body of response . Source Source","title":"Web"},{"location":"modules/web/#web-server-and-client","text":"","title":"Web (server and client)"},{"location":"modules/web/#description","text":"Module that allows you to make small web servers and clients.","title":"Description"},{"location":"modules/web/#import","text":"(import \"web\")","title":"Import"},{"location":"modules/web/#usage","text":"","title":"Usage"},{"location":"modules/web/#server","text":"-- Built for web client from examples (import \"std\" \"web\" \"json\") (defn greet (fn ln) (concat \"Hello, \" fn \" \" ln \"!\")) - Create a handler (defn f (fn ln) (encode $ dict (first_name fn) (last_name ln) (greeting $ greet fn ln))) (defn fpost (txt fn ln) (concat txt \" \" fn \" \" ln)) (defn echo (body) body) - Build + serve (serve $ routeGET \"/greet\" (list \"fname\" \"lname\") f $ routePOST \"/post\" (list \"fname\" \"lname\") fpost $ routePOST \"/echo\" () echo $ server 2025)","title":"Server"},{"location":"modules/web/#client","text":"-- Uses web server from examples (import \"web\" \"std\" \"io\" \"json\") - Build request (set rget $ send $ withParam \"fname\" \"John\" $ withParam \"lname\" \"Black\" $ get \"http://localhost:2025/greet\") - Print response (print $ concat \"Got response: \" $ show rget) (print \"Body:\") (print $ resBody rget) - Decode JSON and get a greeting (set gr $ lookup greeting $ fst $ decode $ resBody rget) (print \"Greeting:\") (print gr)","title":"Client"},{"location":"modules/web/#reference","text":"","title":"Reference"},{"location":"modules/web/#server_1","text":"(server <number:port>) -- creates a web server on port port . (routeGET <string:path> <list of strings:params> <function(params -> string):handler> <server>) -- adds GET route to server . (routePOST <string:path> <list of strings:params> <function(body, params -> string):handler> <server>) -- adds POST route to server . (serve <server>) -- serves a server.","title":"Server"},{"location":"modules/web/#client_1","text":"(get <string:url>) -- creates a GET request to url . (post <string:url>) -- creates a POST request to url . (withParam <string:name> <string or list of strings:value(s)>) -- adds param to request. (withBody <string:body>) -- adds body to request. (send <request>) -- sends request and returns response. (resStatus <response>) -- returns statusCode of response . (resBody <response>) -- returns body of response .","title":"Client"},{"location":"modules/web/#source","text":"Source","title":"Source"}]}